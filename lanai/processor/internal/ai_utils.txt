--@name AIUtilities
--@author Yuri6037

--@includedir lanai/processor/ai_cmds/

Command = {
	PASSING = 0,
	INSUFFICIENT_PERMISSION = 1, --Permission error message
	INVALID_ARGUMENT = 2, --Argument is not valid message
	INSUFFICIENT_ARGUMENT = 3, --Not enough arguments given
	ERROR_GENERIC = 4, --Generic message generated by LanAI
	ERROR_CUSTOM = 5 --Custom message generated by the command's function
}

AIErrorMessages = {
	"I don't know what to do !",
	"I can't find what does this means...",
	"Sorry, I haven't found anything to do...",
	"I don't understand what you mean, sorry..."
}

local ChName = "LanAI_CommandInterface_" .. ents.owner():index()
local ChatQueue = {}

function aiSendHelp(helptbl)
	table.insert(ChatQueue, {PlyLst = nil, Data = helptbl})
end
function aiGetHUDChannel()
	return ChName
end

task.Start(function()
	local pck = ChatQueue[1]
	if (not(pck == nil) and channels.canSend()) then
		channels.send(ChName, pck.PlyLst, pck.Data)
		table.remove(ChatQueue, 1)
	end
end, "LanAI_CommandInterface_DefferedSender", 0.1)

function aiSay(msg, ply)
	if (ply == nil) then
		local plst = {}
		for k, v in pairs(PlayersInsideShipList) do
			table.insert(plst, v)
		end
		if (not(globaltables.player.IntelliHUDLinkedPlayers == nil)) then
			for k, v in pairs(globaltables.player.IntelliHUDLinkedPlayers) do
				if (not(PlayersInsideShip[k])) then
					table.insert(plst, k)
				end
			end
		end
		table.insert(ChatQueue, {PlyLst = plst, Data = msg})
		util.Log("AI.Msg", LOG_INFO, msg)
	else
		table.insert(ChatQueue, {PlyLst = {ply}, Data = msg})
	end
end

function aiSayGuest(ply, msg)
	chat.tell(ply, Color(0, 255, 255), "[LanAI] -> ", Color(255, 0, 0), msg)
end

local Wanted = nil
local AIWhishesTypes = {}

function aiSetAction(msg)
	if (msg == nil) then
		error("AI can't allow wanting null elements !")
		return
	end
	if (aiGetAction()) then
		util.Log("AI.Core", LOG_WARN, "Already wants something !")
		return
	end
	Wanted = msg
	aiSay("Do you want me to " .. Wanted .. " ? (!ai yes or no)")

	timer.create("AIWish", 20, 1, function()
		local b, t = aiGetAction()
		if (b) then
			if (AIWhishesTypes[t].HasRefusedFunc) then
				AIWhishesTypes[t].OnRefused(nil)
			end
			aiClearAction()
			aiSay("My wish has been deleted because of no answers for more than 20 seconds...")
		end
	end)
end

function aiClearAction()
	timer.remove("AIWish")
	Wanted = nil
end

function aiGetAction()
	if (not(Wanted == nil)) then
		return true, Wanted
	end
	return false, nil
end

function aiRegisterAction(name, funcAccepted, funcRefused)
	if (funcAccepted == nil) then
		error("AI actions must have at least a function to fire when accepted !")
		return
	end
	AIWhishesTypes[name] = {Name = name, HasRefusedFunc = not(funcRefused == nil), OnRefused = funcRefused, OnAccepted = funcAccepted}
end

function aiRejectAction(ply)
	local b, t = aiGetAction()
	if (b and AIWhishesTypes[t].HasRefusedFunc) then
		AIWhishesTypes[t].OnRefused(ply)
	end
	aiClearAction()
end

function aiAcceptAction(ply)
	local b, t = aiGetAction()
	if (b) then
		AIWhishesTypes[t].OnAccepted(ply)
	end
	aiClearAction()
end
