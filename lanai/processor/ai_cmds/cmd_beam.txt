--@name BeamCommands
--@author Yuri6037

local function BeamTargetsToVec(vec, err)
	if (vec == nil) then
		return Command.ERROR_CUSTOM, err
	end

	local lst = PopTargets(6)
	if (BeamEntityListToVector(lst, vec)) then
		return Command.PASSING, "Poping and beaming the 6 last targets to destination."
	else
		return Command.ERROR_GENERIC
	end
end

AIRegisterCommand("beam", function(args, ply)
	if (IsValid(args[1])) then
		if (IsValid(args[2])) then
			--Beam player to player
			local pos = args[2]:pos() + Vector(50, 50, 0)
			if (BeamEntityToVector(args[1], pos)) then
				return Command.PASSING, "Beaming player " .. args[1]:name() .. " to player " .. args[2]:name() .. "."
			end
			return Command.ERROR_GENERIC
		elseif (args[2] == "back") then
			--Beam player back to pad
			if (BeamPlayer(args[1])) then
				return Command.PASSING, "Beaming player " .. args[1]:name() .. " to the pad."
			end
			return Command.ERROR_GENERIC
		elseif (args[2] == "planet") then
			--Beam player to planet under ship's transporter
			local tr = util.TraceLine(Ship.TP:entity():getPos(), Ship.TP:entity():getPos() + Vector(0, 0, -2000), SHIP_PARTS)
			if (BeamEntityToVector(args[1], tr.HitPos)) then
				return Command.PASSING, "Beaming player " .. args[1]:name() .. " to planet under ship's transporter."
			end
			return Command.ERROR_GENERIC
		elseif (args[2] == nil) then
			--Beam from pads to player
			local pos = args[1]:pos() + Vector(50, 50, 0)
			if (BeamToVector(pos)) then
				return Command.PASSING, "Beaming to player " .. args[1]:name() .. "."
			end
			return Command.ERROR_GENERIC
		else
			--Beam player to point
			if (BeamEntityToPoint(args[1], args[2])) then
				return Command.PASSING, "Beaming player " .. args[1]:name() .. " to " .. args[2] .. "."
			end
			return Command.ERROR_GENERIC
		end
	elseif (args[1] == "pad" and IsValid(args[2])) then
		--Beam from pads to external pad
		for k, v in pairs(find.byClass("transporter_pad")) do
			if (v:owner() == args[2]) then
				if (BeamToPad(v)) then
					return Command.PASSING, "Beaming players to external pad."
				end
				return Command.ERROR_GENERIC
			end
		end
		return Command.ERROR_CUSTOM, "no pads for player '" .. args[2]:name() .. "'"
	elseif (args[1] == "planet") then
		--Beam from pads to planet under ship's transporter
		local tr = util.TraceLine(Ship.TP:entity():getPos(), Ship.TP:entity():getPos() + Vector(0, 0, -2000), SHIP_PARTS)
		if (not(tr.HitPos == nil)) then
			BeamToVector(tr.HitPos)
			return Command.PASSING, "Beaming players to planet under ship's transporter."
		else
			return Command.ERROR_GENERIC
		end
	elseif (args[1] == "list" or args[1] == "targets") then
		if (IsValid(args[2])) then
			--Beam targets to player
			local pos = args[2]:pos() + Vector(50, 50, 0)
			return BeamTargetsToVec(pos, "unknown")
		elseif (args[2] == "back") then
			--Beam targets back to pad
			local lst = PopTargets(6)
			if (BeamEntityList(lst)) then
				return Command.PASSING, "Poping and beaming the 6 last targets back to the pad."
			else
				return Command.ERROR_GENERIC
			end
		elseif (args[2] == "planet") then
			--Beam targets to planet under ship's transporter
			local tr = util.TraceLine(Ship.TP:entity():getPos(), Ship.TP:entity():getPos() + Vector(0, 0, -2000), SHIP_PARTS)
			return BeamTargetsToVec(tr.HitPos, "trace did not hit ground")
		else
			--Beam targets to point
			return BeamTargetsToVec(GetBeamPointFromName(args[2]), "no such beam point name")
		end
	elseif (args[1] == "back") then
		--Beam command sender back to pad
		if (BeamPlayer(ply)) then
			return Command.PASSING, "Beaming " .. ply:name() .. " back to pad."
		end
		return Command.ERROR_GENERIC
	else
		--Beam from pads to point
		if (BeamToPoint(args[1])) then
			return Command.PASSING, "Beaming players to " .. args[1] .. "."
		end
		return Command.ERROR_GENERIC
	end
end, {"Beam management.", "<command> <option/player> [option/player]", ""}, {"player:string", "player:string"}, {}, 1)
