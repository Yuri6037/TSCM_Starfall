--@name SensorApp
--@author Yuri6037

local square32 = {
	VERTEX(0, 0),
	VERTEX(16, 0),
	VERTEX(16, 16),
	VERTEX(0, 16)
}

local ico = {
	[32] = {
		{
			Color = COLOR(0, 255, 255),
			Vertices = GUI.PolyTransform(square32, 0, 0)
		},
		{
			Color = COLOR(255, 255, 0),
			Vertices = GUI.PolyTransform(square32, 16, 0)
		},
		{
			Color = COLOR(255, 0, 0),
			Vertices = GUI.PolyTransform(square32, 8, 16)
		},
		{
			Color = COLOR(0, 0, 255),
			Vertices = {
				VERTEX(0, 32),
				VERTEX(16, 0),
				VERTEX(16, 16)
			}
		},
		{
			Color = COLOR(0, 0, 255),
			Vertices = {
				VERTEX(16, 16),
				VERTEX(16, 0),
				VERTEX(32, 32)
			}
		}
	},
	[16] = {
		{
			Color = COLOR(0, 255, 255),
			Vertices = GUI.PolyTransform(square32, 0, 0, 0.5)
		},
		{
			Color = COLOR(255, 255, 0),
			Vertices = GUI.PolyTransform(square32, 16, 0, 0.5)
		},
		{
			Color = COLOR(255, 0, 0),
			Vertices = GUI.PolyTransform(square32, 8, 16, 0.5)
		},
		{
			Color = COLOR(0, 0, 255),
			Vertices = {
				VERTEX(0, 16),
				VERTEX(8, 0),
				VERTEX(8, 8)
			}
		},
		{
			Color = COLOR(0, 0, 255),
			Vertices = {
				VERTEX(8, 8),
				VERTEX(8, 0),
				VERTEX(16, 16)
			}
		}
	}
}

local function PlayerInBox(ply, min, max)
    local x = min.x
    local y = min.y
    local z = min.z
    local x1 = max.x
    local y1 = max.y
    local z1 = max.z
    local cX = ply:getPos().x
    local cY = ply:getPos().y
    local cZ = ply:getPos().z

    if (cX >= x and cX <= x1 or cX <= x and cX >= x1) then
        if (cY >= y and cY <= y1 or cY <= y and cY >= y1) then
            if (cZ >= z and cZ <= z1 or cZ <= z and cZ >= z1) then
                return true
            end
        end
    end
    return false
end

local app = {}

function app:Init()
    self:SetTitle("Sensor")
    self:SetSize(550, 256)
    self:SetIcon32(ico[32])
    self:SetIcon16(ico[16])
    self:SetPos(LOCATION_CENTER)

    self:EnableCursor(COLOR(0, 0, 133))
    local data = {}
    self.PList = find.allPlayers()
    for k, v in pairs(self.PList) do
    	table.insert(data, v:name())
    end
    self.PlyLst = self:AddComponent("listbox", 10, 32)
    self.PlyLst:SetSize(250, 215)
    self.PlyLst:SetMaxLines(10)
    self.PlyLst:SetData(data)
    self.OldID = nil
    self.PStr = ""
    self.PStr1 = ""
end
function app:UpdateCurSelectedData()
	local ply = self.PList[self.OldID]
	local pos = ply:pos()
	self.PPos = Vector(math.round(pos.X), math.round(pos.Y), math.round(pos.Z))
	self.PLoc = "NULL"
	if (PlayerInBox(ply, Universe.Min, Universe.Max)) then
		self.PLoc = "Universe"
	elseif (PlayerInBox(ply, Pegasus.Min, Pegasus.Max)) then
		self.PLoc = "Pegasus"
	elseif (PlayerInBox(ply, Milkyway.Min, Milkyway.Max)) then
		self.PLoc = "Milkyway"
	end
	net.SendPacket("GETENV", ply)
end
function app:OnDataReceived(s, s1)
	self.PStr = s
	self.PStr1 = s1
end
function app:PostRender()
	local id, name = self.PlyLst:GetSelected()
	if (IsValid(self.PList[id])) then
		GUI.InvGradiantRect(285, 60, 255, 160, COLOR(0, 0, 0))
		GUI.NormGradiantRect(285, 60, 255, 160, COLOR(0, 0, 0))
		GUI.Text("Name : " .. name, 295, 60, SmallFont, COLOR(255, 255, 255))
		if (not(self.OldID == id)) then
			self.OldID = id
			self:UpdateCurSelectedData()
		end
		GUI.Text("[" .. self.PPos.X .. ", " .. self.PPos.Y .. ", " .. self.PPos.Z .. "]", 295, 90, SmallFont, COLOR(255, 255, 255))
		GUI.Text("Location : " .. self.PLoc, 295, 110, SmallFont, COLOR(255, 255, 255))
		GUI.Text(self.PStr, 295, 123, SmallFont, COLOR(255, 255, 255))
		GUI.Text(self.PStr1, 295, 136, SmallFont, COLOR(255, 255, 255))
	end
end

OS.DefineApp("sensor", app)
OS.AddAppMenuItem("sensor", "Sensor", "Tools", ico[16])